import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, r2_score

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤", layout="wide")
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å Prophet")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ---
uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—è–¥–æ–º (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ 'Order Date' –∏ 'Sales')",
    type=["csv"]
)

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    if not {"Order Date", "Sales"}.issubset(df.columns):
        st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'Order Date' –∏ 'Sales'")
    else:
        # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
        data_prophet = (
            df[['Order Date','Sales']]
              .rename(columns={'Order Date':'ds','Sales':'y'})
              .assign(ds=lambda d: pd.to_datetime(d['ds']))
              .set_index('ds')
              .resample('W-MON')['y'].sum()
              .reset_index()
        )

        # --- –î–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ train/test (80/20) ---
        split_point = int(len(data_prophet) * 0.8)
        train = data_prophet.iloc[:split_point]
        test  = data_prophet.iloc[split_point:]

        # --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ---
        @st.cache_resource
        def train_prophet_model(train_data):
            model = Prophet()
            model.fit(train_data)
            return model

        model = train_prophet_model(train)

        # --- –ü—Ä–æ–≥–Ω–æ–∑ ---
        weeks_ahead = st.number_input("–°–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ø–µ—Ä–µ–¥?", min_value=1, value=30)
        prediction_points = len(test) + weeks_ahead
        future = model.make_future_dataframe(periods=prediction_points, freq='7D')
        forecast = model.predict(future)

    
        # --- –ú–µ—Ç—Ä–∏–∫–∏ ---
        st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏")
        st.markdown("""
        ##### MAE (Mean Absolute Error) ‚Äî —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. 
        ##### –ß–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø—Ä–æ–≥–Ω–æ–∑.  
        ##### R¬≤ (–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∞—è –¥–æ–ª—è –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω—è–µ—Ç—Å—è –º–æ–¥–µ–ª—å—é.
        #####  –ó–Ω–∞—á–µ–Ω–∏–µ 1 ‚Üí –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, 0 ‚Üí –º–æ–¥–µ–ª—å –≤—ã–¥–∞—Å—Ç —Å—Ä–µ–¥–Ω–µ–π —Ä–µ—É–∑–ª—å—Ç–∞—Ç, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ ‚Üí –º–æ–¥–µ–ª—å —Ö—É–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        """)
        train_pred = forecast[forecast['ds'].isin(train['ds'])]
        test_pred  = forecast[forecast['ds'].isin(test['ds'])]
        st.write(f"Train ‚Üí MAE: {mean_absolute_error(train['y'], train_pred['yhat']):.2f}, R¬≤: {r2_score(train['y'], train_pred['yhat']):.2f}")
        st.write(f"Test ‚Üí MAE: {mean_absolute_error(test['y'], test_pred['yhat']):.2f}, R¬≤: {r2_score(test['y'], test_pred['yhat']):.2f}")

        st.markdown("")
        # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
        st.subheader("üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—Å–µ–º —Ä—è–¥–µ")
        st.markdown("""
        ##### –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è: —ç—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ Prophet. –û–Ω–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞.
        ##### –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä—ë–¥: –∫—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä—è–¥ –Ω–∞ 30 –Ω–µ–¥–µ–ª—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã.
        ##### –í—ã –≤–∏–¥–∏—Ç–µ, –∫–∞–∫ –º–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –ø—Ä–æ–¥–∞–∂–∏ –≤ –±—É–¥—É—â–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π.
        ##### –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ (—Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å): –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞,
        ##### —Ç.–µ. –¥–∏–∞–ø–∞–∑–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        """)
        fig, ax = plt.subplots(figsize=(14,6))
        ax.plot(data_prophet['ds'], data_prophet['y'], label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', alpha=0.6)
        ax.plot(forecast['ds'], forecast['yhat'], label='–ü—Ä–æ–≥–Ω–æ–∑ Prophet', color='red')
        ax.fill_between(forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'], color='red', alpha=0.2)
        ax.legend()
        ax.grid(True)
        st.pyplot(fig)

        # --- –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ ---
        st.subheader("‚öôÔ∏è –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–µ–π")
        st.markdown("""
        #### 1 –≥—Ä–∞—Ñ–∏–∫
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä—è–¥–∞ ‚Äî —Ä–∞—Å—Ç—É—Ç –ø—Ä–æ–¥–∞–∂–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–ª–∏ –ø–∞–¥–∞—é—Ç. \n
        –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ. 
        #### 2 –≥—Ä–∞—Ñ–∏–∫ 
        –û—Ç—Ä–∞–∂–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–æ–ª–µ–±–∞–Ω–∏—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –ø–µ—Ä–µ–¥ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏ –∏–ª–∏ –ª–µ—Ç–æ–º. \n
        –≠—Ç–æ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, –≥–æ–¥).
        """)
        fig2 = model.plot_components(forecast)
        st.pyplot(fig2)